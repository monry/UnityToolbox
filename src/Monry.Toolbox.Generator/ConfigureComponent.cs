using Microsoft.CodeAnalysis;

namespace Monry.Toolbox.Generator;

[Generator(LanguageNames.CSharp)]
public class ConfigureComponent : IIncrementalGenerator
{
    private const string Namespace = "Monry.Toolbox.Attributes";
    private const string AttributeName = "ConfigureComponentAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var source = context.SyntaxProvider
            .ForAttributeWithMetadataName(
                $"{Namespace}.{AttributeName}",
                // 絞り込みは属性だけで OK
                (_, _) => true,
                (syntaxContext, _) => syntaxContext
            );
        context.RegisterPostInitializationOutput(OnPostInitialization);
        context.RegisterSourceOutput(source, Emit);
    }

    private static void OnPostInitialization(IncrementalGeneratorPostInitializationContext context)
    {
        context.CancellationToken.ThrowIfCancellationRequested();
        context.AddSource(
            AttributeName,
            // lang=csharp
            $$"""
            namespace {{Namespace}}
            {
                [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
                sealed class {{AttributeName}} : System.Attribute
                {
                    public {{AttributeName}}(params string[] fieldNames)
                    {
                        FieldNames = fieldNames;
                    }
            
                    public System.Collections.Generic.IEnumerable<string> FieldNames { get; }
                    public bool ShouldAutoInject { get; set; }
                }
            }
            """);
    }

    private static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext syntaxContext)
    {
        var typeSymbol = (INamedTypeSymbol)syntaxContext.TargetSymbol;
        var isGlobalNamespace = typeSymbol.ContainingNamespace.IsGlobalNamespace;
        var @namespace = isGlobalNamespace
            ? string.Empty
            : $"namespace {typeSymbol.ContainingNamespace.ToDisplayString()}";
        var fullTypeName = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
            .Replace("global::", "")
            .Replace("<", "_")
            .Replace(">", "_");
        var configureComponentAttribute = typeSymbol.GetAttributes()
            .Single(x => x.AttributeClass?.ToDisplayString() == $"{Namespace}.{AttributeName}");
        var indent = isGlobalNamespace ? string.Empty : "    ";
        var fieldNames = configureComponentAttribute.ConstructorArguments[0].Values.Select(x => x.Value as string ?? string.Empty).ToArray();
        var shouldAutoInject = configureComponentAttribute.NamedArguments.SingleOrDefault(x => x.Key == "ShouldAutoInject").Value.Value as bool? ?? true;
        var memberTypes = typeSymbol.GetMembers()
            .Where(x => x is IFieldSymbol or IPropertySymbol)
            .Where(x => fieldNames.Contains(x.Name))
            .Select(x => x switch
            {
                IFieldSymbol fieldSymbol => (name: fieldSymbol.Name, type: fieldSymbol.Type),
                IPropertySymbol propertySymbol => (name: propertySymbol.Name, type: propertySymbol.Type),
                _ => default
            })
            .ToDictionary(x => x.name, x => x.type);

        var setMembers = memberTypes.Aggregate(
            string.Empty,
            (current, memberType) =>
                current + $"{indent}        {memberType.Key} = GetComponent<{memberType.Value.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>();\n"
        );
        var autoInject = shouldAutoInject
            ? $"{indent}        VContainerUtility.TryAddAutoInjectGameObjects(gameObject);"
            : string.Empty;

        var code = $$"""
            // <auto-generated />
            using Monry.Toolbox.VContainer;
            using UnityEngine;
            
            {{@namespace}}
            {{(isGlobalNamespace ? string.Empty : "{")}}
            {{indent}}partial class {{typeSymbol.Name}}
            {{indent}}{
            {{indent}}    [ContextMenu("Configure")]
            {{indent}}    private void Reset()
            {{indent}}    {
            {{setMembers}}
            {{autoInject}}
            {{indent}}    }
            {{indent}}}
            {{(isGlobalNamespace ? string.Empty : "}")}}
            """;
        context.AddSource($"{fullTypeName}.Configure.g.cs", code);
    }
}
